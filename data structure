class Queue:
    # max_size: size of Q
    # Q: Array
    def __init__(self, max_size):
        self.max_size = max_size
        self.Q = [0] * max_size
        self.num = 0
        self.first = 0
    def enqueue(self, item):
        if self.num >= self.max_size:
            raise Exception("Queue overflow")
        self.Q[(self.num + self.first) % self.max_size] = item
        self.num += 1
    def dequeue(self):
        if self.num == 0:
            raise Exception("Queue empty")       
        item = self.Q[self.first]
        self.first = (self.first + 1) % self.max_size
        self.num -= 1
        return item
    def front(self):
        if self.num == 0:
            raise Exception("Queue empty")
        return self.Q[self.first]
    def is_empty(self):
        return self.num == 0
    def size(self):
        return self.num
    def is_full(self):
        return self.num >= self.max_size
    def output(self,i):
        item=self.Q[i]
        self.num-=1
        return item
    def show(self):
        return self.Q



q=Queue(10) # (front of queue)[](back of queue)
q.enqueue("ra'na") # ["ra'na"]
q.enqueue("vez") # ["ra'na", "vez"]
q.enqueue("Arya") # ["ra'na", "vez", "Arya"]
print(q.output(1))
print(q.show())
print("queue size is: ",q.size())
print(q.dequeue(), "left the queue") # ["vez", "Arya"]
print(q.show())
print("front of queue is:",q.front())
q.enqueue("milda") # ["vez", "Arya", "milda"]
print(q.show())
print(q.output(2))
print("queue size is: ",q.size())
print(q.show())
# print(q.dequeue()) # ["Arya","milda"]
print(q.dequeue()) # ["milda"]
# print(q.dequeue()) # []
print(q.show())
print("It was a queue")
